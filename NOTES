INSTALLATION, SETTING UP ENVIRONMENT VARIABLES AND CHECKING VERSION OF JAVA & TOMCAT



Installation
	- Download JDK and extract it to your favourite location.
	- Download Maven and extract it to your favourite location.
	- Set-up below Environment variables for Maven and JDK in order to run Maven
	  and JDK commands from any directory in th system.
		1. JAVA_HOME
		2. M2_HOME
		3. PATH

Installing JDK and Maven:
=======================
  A. create $USER_HOME/.bashrc
  
  B. create below Environment variables
	export M2_HOME=/home/praveen/mavensoftwares/apache-maven-3.3.9
	export JAVA_HOME=/home/praveen/mavensoftwares/jdk1.8.0_121

	export PATH=$M2_HOME/bin:$JAVA_HOME/bin:$PATH


Load .bashrc using below command or open new ternimial
	$ source .bashrc
 
Verify Installation
	$ javac -version
	$ mvn --version



MAVEN LIFE (or) BUILD CYCLE


- validate	=========		validate project's structure
- initialize	=========		prepares project with initial pre-requisites ex: setting properties, creating necessary 					directory structure..etc.	 
- compile	=========		compiles "main" java code.
- test-compile	=========		compiles "test" java code
- test		=========		Runs the test cases and generates test reports.
- package	=========		creates jar/war.
- install	=========		copy built artifacts i.e jar/war file into local repository $USER_HOME/.m2




VERIFYING OF BUILT ARTIFACTS
----------------------------


Go to "target" folder and observe below.
	
			target
			  |
		classes     test-classes	surefire-reports	jar/war file


	classes: directory contains compiled class files of main source code
	test-classes: directory contains compiled class	files of test source code
				
	surefire-reports: contains test reports.

	flipkart-1.0-SNAPSHOT.jar: jar file of main code



Maven Automatic Dependency resolution feature
	
	- Direct dependency
	- Transitive dependency(hamcrest is dependency of junit and becomes transitive dependency for our code)

MAVEN REPOSITORIES:
	- Central
	- Private/Remote (Nexus/atifactrory)
	- Local (.m2)

TO REMOVE "target" FOLDER
"mvn clean" 	
	
BUILD TYPES:
	- Complete build/Clean build/Full build
	- Incremental build
	- Nightly build
	- Daily build
	- bugfix build
	- adhoc/unplanned/emergency builds

SKIPPING TEST CASES:
	$ mvn install -DskipTests (skip test executon)
	$ mvn install -Dmaven.test.skip=true (skip test code compilation and executio
RUN ONLY UNIT TESTING i.e 'test' life cycle phase
	$ mvn surefire:test


Create Maven web application project usgin below command.

$ mvn archetype:generate -DgroupId=com.pavan -DartifactId=pavan -Dversion=1.0-SNAPSHOT -DinteractiveMode=false -DarchetypeArtifactId=maven-archetype-webapp

--Build the application using below Maven command
$ mvn install

--Check final artifact i.e pavan.war file in target directory
$ ls target 

--Deploy pavan.war into tomcat.
$ cp pavan.war $TOMCAT_HOME/webapps

--Start tomcat server
$ $TOMCAT_HOME/bin/startup.sh

--Launch application with below URL.
http://localhost:8080/flipkart
[http://tomcat_server_name:8080/warfilename]



- REALTIME PROJECT --> END-TO-END BUILD AND DEPLOYMENT PROCESS:
===============================================================
-----Install GIT
$ sudo apt-get update
$ sudo apt-get install git

-----Clone gamutkart application source code into the build server from "gamutkart" github repository.
$ git clone https://github.com/nageshvkn/gamutkart2.git

-----Build "gamutkart" application using below command.
$ mvn install

- When we run 'mvn install' command, by default maven reads pom.xml file and runs the given goal(i.e install).
- mvn install command reads the pom.xml for all build configurations before it executes it's lifecycle build steps. ex: it checks GAV(groupId, artifactId and version), package type(jar,war or ear), downloads the all the required dependencies from central or private repositories and compiles the source by including dependencies in javac compiler classpath.

Based on the package and <finalName> attribute it produces the artifact(jar/war/ear) with given name and installs to .m2/repository/${groupId}/${artifactId}/${version}/${artifactId}-${version}.jar/war/ear.

Assuming it's web application and .war is our final artifact, we need to deploy it to some application server like tomcat to make application accessible by the end user. 

-----Deploy gamutkart.war application to remote server deployment location(i.e $TOMCAT_HOME/webapps) using below command or some shell or automation scripts.
	scp gamutkart.war gamut@192.168.0.4:/home/gamut-idc-node1/Distros/apache-tomcat-8.5.11/webapps

-----After the deployment, we need start the server using below tomcat startup comamnd.
	$TOMCAT_HOME/bin/startup.sh

-----Tomcat by default runs on port 8080. So application can be accessed with URL like below.
	ex: http://IPAddress:8080/gamutkart
		
-----In case is there any issue in the application, the errors will be logged in $TOMCAT_HOME/logs/catalina.2017-03-24.log file.
	We can check this file and if there are any errors/exceptions, we provide this info to developers.


INSTALLATION, CHECKING VERSION AND UNINSTALLATION OF GIT



GIT Installation (Ubuntu):
$ sudo apt-get update
$ sudo apt-get install git

Verify Installation:
	which git
	git --version


GIT Uninstallation:
$ sudo apt-get remove git



Git stores all configurations in below file
"/home/user/.gitconfig"

Q. what is git?
	Git is a free and open source distributed version control systen. Which is designed to handle everything from small to very large projects with speed and eficiency.

Q. What are the advantages of git?
	1. Client can clone entire repositories on their local system.
	2. Push/Pull operations are faster.
	3. Works are shared automatically by commit.
	4. Commits are possible even if offline.

Q. What is the difference between git and SVN?
	1. Git is a distributed version control system. 	1. SVN is a centralized version control system.
	2. It is a 3rd generation of version control tool	2. It is a 2nd generation of version control system.
	3. Client can clone entire repositories on their        3. Version history is stored on a server side repository.
	   local system.
	4. Push/Pull operations are faster.			4. Push/Pull operations are slower.
	5. Work is shared automaticlly.				5. Nothing is shared automatically.
	6. Commits are possible even if offline.		6. Only online commits are allowed.
Q. How to push files to git repository?
	1. Open terminal
	2. Setup mandatory configurations:	$ git config --global user.name "pavankumar"
						$ git config --global user.email "pavankumar2044@gmail.com"
	3. Check the configurations:		$ git config --list
	"THESE ARE USED TO SET AND CHECK THE AUTHOR NAME AND EMAIL ADRESS RESPECTIVELY TO BE USED WITH OUR COMMITS"
	4. git init - TO MAKE THE CURRENT DIRECTORY AS A WORKING REPOSITORY.
	5. git add - TO ADD FILES TO STAGING AREA.
	6. git status - TO LIST ALL THE FILES THAT HAVE TO BE COMMITTED.
	7. git commit -m "committing message"
	8. git remote add origin "remote server URL" - TO CONNECT OUR LOCAL REPOSITORY TO THE REMOVE SERVER.
	9. git push origin master - TO SEND THE COMMITTED CHANGES OF MASTER BRANCH TO OUR REMOTE REPOSITORY.
		-Give username and password.
Q. What is git log file?
	Git log file is the one which contains the version history for the current branch.
there are three commands in git logs. 	They are git log --since=YYYY-MM-DD
						 git log --until=YYYY-MM-DD
						 git log --author="author name"
Q. What is git commit?
	Git commit is used to adding files from staging area to local repository. There are three types in git commit.
they are 	git commit -a --- this is used to commit files which are added in staging area by git add command and also commits the files which have changed since then.
		git commit -m "commit message" --- this is used to record or snapshot permanently in the version history.
		git commit -am  --- this is used to commit the files without adding them to staging area. 
